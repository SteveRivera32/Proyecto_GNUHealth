tabla: gnuhealth_patient
descripción: Contiene información médica, social, demográfica y de estilo de vida de los pacientes registrados en GNU Health.

NOTA: Simpre que el usaurio pida realizar algun tipo de conteo asegurate de agrupar por campos relevanates.

Guia de uso:

Algunas preguntas relacionadas a este documento son:
Estado Activo: Siempre se debe verificar que el paciente esté activo. La tabla party_party contiene el campo active para esta verificación.
Información de Pacientes: La información principal de los pacientes se encuentra en gnuhealth_patient, vinculada a party_party por patient.name = party.id.
Cálculo de Edad: Para la edad, se requiere gnuhealth_patient, party_party y gnuhealth_birth_certificate.
Ubicación (Municipio/Ciudad/Lugar): La ubicación del paciente se obtiene a través de gnuhealth_du (descripción de la unidad de distribución) relacionada con party_party.du.



Para obtener la ubciacion de un paciente (Municipio, vivienda) usa este SQL
SQL: SELECT du.desc as "Municipio"  FROM gnuhealth_patient as patient LEFT JOIN party_party as party  on  patient.name = party.id
LEFT JOIN gnuhealth_du as du ON party.du=du.id WHERE party.active=true

Para saber si un apciente esta activo se ejecuta este SQL
SQL: SELECT * FROM gnuhealth_patient AS patient LEFT JOIN party_party AS party ON patient.name = party.id WHERE party.active = TRUE;

Explicacion de este query Esta consulta base es esencial para filtrar solo los registros de pacientes que están designados como activos en el sistema, utilizando la columna active de la tabla party_party.

UserQuestion:

"Listar la distribución de los casos por edad."
"Mostrar un promedio de edad de los pacientes."
"¿Cuál es la edad de los pacientes?"
SQL de Promedio de Edad:
respond: {
  "require": true,
  "sql": "SELECT AVG(DATE_PART('year', AGE(birth.dob))) AS promedio_edad FROM gnuhealth_patient AS patient LEFT JOIN party_party AS party ON patient.name = party.id LEFT JOIN gnuhealth_birth_certificate AS birth ON birth.name = party.id WHERE party.active = TRUE;"
}

SQL de Distribución por Edad (rangos/individual):
{
  "require": true,
  "sql": "SELECT DATE_PART('year', AGE(birth.dob)) AS edad, COUNT(patient.name) AS total_pacientes FROM gnuhealth_patient AS patient LEFT JOIN party_party AS party ON patient.name = party.id LEFT JOIN gnuhealth_birth_certificate AS birth ON birth.name = party.id WHERE party.active = TRUE GROUP BY edad ORDER BY edad;"
}
Para la edad, se usa la función DATE_PART('year', AGE(birth.dob)) combinando gnuhealth_patient, party_party y gnuhealth_birth_certificate. El promedio usa AVG(), y la distribución se logra con COUNT() y GROUP BY sobre la edad calculada.


UserQuestion:
"Listar la distribución de los pacientes por (sexo, género, mujer y hombre)."

respond:{
  "require": true,
  "sql": "SELECT party.gender, COUNT(patient.name) AS total_pacientes FROM gnuhealth_patient AS patient LEFT JOIN party_party AS party ON patient.name = party.id WHERE party.active = TRUE GROUP BY party.gender;"
}
Esta consulta utiliza COUNT() y GROUP BY sobre el campo party.gender de la tabla party_party para agrupar y contar pacientes por su género. La condición party.active = TRUE asegura la inclusión solo de pacientes activos.


UserQuestion: 
- Muéstrame el recuento de casos de enfermedades por condición de salud (agrupando 'diabetes' y sus variantes) desglosado por género (masculino y femenino), incluyendo solo pacientes activos. Ordena por el total de casos.",
- Lista un conteo de las enfermedades y su dstirbucion por( sexo,genero, hombre y mujer)
respond:{
    "require": true,
    "sql": "SELECT CASE WHEN LOWER(gp.name) LIKE '%diabetes%' THEN 'Diabetes' ELSE gp.name END AS condicion_salud, COUNT(CASE WHEN pp.gender = 'm' THEN 1 END) AS masculino, COUNT(CASE WHEN pp.gender = 'f' THEN 1 END) AS femenino, COUNT(gpd.id) AS total_casos FROM gnuhealth_patient_disease AS gpd JOIN gnuhealth_pathology AS gp ON gpd.pathology = gp.id JOIN gnuhealth_patient AS ghp ON gpd.name = ghp.id JOIN party_party AS pp ON ghp.name = pp.id WHERE pp.active = TRUE GROUP BY condicion_salud ORDER BY total_casos DESC;"
}
  "Explicacion": "Esta consulta agrupa los diagnósticos de enfermedades. Utiliza un `CASE` para normalizar todas las variantes de 'diabetes' a una sola categoría 'Diabetes'. Luego, cuenta los casos para hombres y mujeres por separado usando `COUNT(CASE WHEN ... THEN 1 END)`, y un conteo total de casos por cada condición. Se unen las tablas `gnuhealth_patient_disease`, `gnuhealth_pathology`, `gnuhealth_patient` y `party_party`. La condición `pp.active = TRUE` asegura que solo se consideren pacientes activos. Los resultados se agrupan por la condición de salud y se ordenan por el total de casos de forma descendente."



columnas:
  id: integer, clave primaria autoincremental
  create_date: timestamp, fecha de creación del registro
  write_date: timestamp, fecha de última modificación
  create_uid: integer, ID del usuario que creó el registro
  write_uid: integer, ID del usuario que modificó por última vez
  family: integer, ID de la familia del paciente (FK a gnuhealth_family.id)
  blood_type: varchar, tipo de sangre del paciente
  general_info: text, información médica general
  primary_care_doctor: integer, médico de cabecera (FK a gnuhealth_healthprofessional.id)
  critical_info: text, información crítica adicional
  rh: varchar, factor Rh del paciente
  current_address: integer, dirección temporal (FK a party_address.id)
  name: integer, ID del paciente (FK a party_party.id)
  dod: timestamp, fecha de fallecimiento
  current_insurance: integer, aseguradora actual (FK a gnuhealth_insurance.id)
  cod: integer, causa de muerte (FK a gnuhealth_pathology.id)
  deceased: boolean, indica si el paciente ha fallecido
  works_at_home: boolean, indica si trabaja desde casa
  prison_current: boolean, indica si está actualmente en prisión
  domestic_violence: boolean, ha sido víctima de violencia doméstica
  hostile_area: boolean, vive en zona de riesgo o conflicto
  sexual_abuse: boolean, ha sufrido abuso sexual
  hours_outside: integer, horas promedio fuera del hogar por día
  drug_addiction: boolean, adicción activa a drogas
  school_withdrawal: boolean, abandono escolar
  income: varchar, nivel de ingresos del paciente
  single_parent: boolean, vive en familia monoparental
  ses_notes: text, notas adicionales sobre situación socioeconómica

llaves_foráneas:
  family → gnuhealth_family(id)
  primary_care_doctor → gnuhealth_healthprofessional(id)
  current_address → party_address(id)
  name → party_party(id)
  current_insurance → gnuhealth_insurance(id)
  cod → gnuhealth_pathology(id)
  diet_belief → gnuhealth_diet_belief(id)
  vegetarian_type → gnuhealth_vegetarian_types(id)

índices:
  - clave primaria: id
  - única: name
  - índice adicional: active